"use strict";(self.webpackChunkme=self.webpackChunkme||[]).push([[6580],{8936:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=r(4848),i=r(8453);const a={slug:"destructuring-in-python",title:"Destructuring in Python",authors:["pxuanbach"],tags:["python"],date:"2024-06-08T10:00",image:"/img/06_destructuring_in_python/featured.png"},s=void 0,o={permalink:"/blog/destructuring-in-python",source:"@site/blog/06_destructuring_in_python/index.md",title:"Destructuring in Python",description:"Hello, are you learning Python? Does your job involve using Python? If so, you will find this article quite interesting \ud83d\ude09.",date:"2024-06-08T10:00:00.000Z",tags:[{label:"python",permalink:"/blog/tags/python"}],readingTime:6.42,hasTruncateMarker:!0,authors:[{name:"Bach Pham",title:"Software Engineer",url:"https://github.com/pxuanbach",imageURL:"https://avatars.githubusercontent.com/u/55500268?v=4",key:"pxuanbach"}],frontMatter:{slug:"destructuring-in-python",title:"Destructuring in Python",authors:["pxuanbach"],tags:["python"],date:"2024-06-08T10:00",image:"/img/06_destructuring_in_python/featured.png"},unlisted:!1,prevItem:{title:"Asynchronous Request Batching Design Pattern in Node.js",permalink:"/blog/asynchronous-request-batching-design-pattern-in-nodejs"},nextItem:{title:"Essential modules for developing applications with FastAPI (P3 - Caching)",permalink:"/blog/essential-modules-for-developing-applications-with-fastapi-p3-caching"}},c={authorsImageUrls:[void 0]},l=[{value:"What is Destructuring in Python?",id:"what-is-destructuring-in-python",level:2},{value:"Destructuring with Lists and Tuples",id:"destructuring-with-lists-and-tuples",level:2},{value:"Standard concept",id:"standard-concept",level:3},{value:"Ignoring values",id:"ignoring-values",level:3},{value:"Assign the remaining values",id:"assign-the-remaining-values",level:3},{value:"Destructuring in loops",id:"destructuring-in-loops",level:2},{value:"Destructuring dictionaries",id:"destructuring-dictionaries",level:2},{value:"Standard concept",id:"standard-concept-1",level:3},{value:"Advanced techniques",id:"advanced-techniques",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Hello, are you learning Python? Does your job involve using Python? If so, you will find this article quite interesting \ud83d\ude09."}),"\n",(0,t.jsx)(n.p,{children:"This article is largely inspired by the destructuring assignment in JavaScript. While working with JavaScript, I became greatly fascinated with the destructuring assignment syntax in JavaScript, and I needed it in my Python code."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-destructuring-in-python",children:"What is Destructuring in Python?"}),"\n",(0,t.jsx)(n.p,{children:"Destructuring syntax is an extremely useful feature in Python that breaks down values from lists, tuples, or dictionary attributes into individual variables. It helps us write clean and readable code."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Destructuring Dictionary Example",src:r(8624).A+"",width:"1880",height:"660"})}),"\n",(0,t.jsx)(n.p,{children:"Now, let\u2019s explore it!"}),"\n",(0,t.jsx)(n.h2,{id:"destructuring-with-lists-and-tuples",children:"Destructuring with Lists and Tuples"}),"\n",(0,t.jsx)(n.h3,{id:"standard-concept",children:"Standard concept"}),"\n",(0,t.jsx)(n.p,{children:"We can easily unpack Lists or Tuples using the following syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"# list\r\nfirst, second, third = [3, 6, 8]  \r\nprint(first)    # 3\r\nprint(second)   # 6\r\nprint(third)    # 8\r\n\r\n# tuple\r\none, two, three = (1, 2, 3)\r\nprint(one)      # 1\r\nprint(two)      # 2\r\nprint(three)    # 3\n"})}),"\n",(0,t.jsx)(n.p,{children:"These are just the standard concepts for destructuring lists or tuples. At this point, we should be concerned with the order and number of elements of a list or a tuple."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Using the wrong order will lead to incorrect data flow in the system. This can become a major issue for your system, where high data consistency is essential."}),"\n",(0,t.jsxs)(n.li,{children:["If the number of variables to be unpacked is not equal to the length of the object. It will raise a ",(0,t.jsx)(n.code,{children:"ValueError"})," exception. For example:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'try:\r\n    first, second, third, four = [3, 6, 8]  \r\nexcept ValueError as e:\r\n    print("ValueError -", str(e))\r\n# ValueError - not enough values to unpack (expected 4, got 3)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"ignoring-values",children:"Ignoring values"}),"\n",(0,t.jsx)(n.p,{children:"In practice, there are many cases where we just want to unpack some values in a list or a tuple. How can we do that? Luckily, we have some syntax to make this more convenient."}),"\n",(0,t.jsxs)(n.p,{children:["With an ",(0,t.jsx)(n.code,{children:"_"})," character In place of a variable name. We can skip the unused element and move on to the next element in the list or tuple."]}),"\n",(0,t.jsx)(n.p,{children:"Code example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"one, _, three, _, _ = [1, 2, 3, 4, 5]\r\nprint(one, three)   # 1 3\n"})}),"\n",(0,t.jsx)(n.h3,{id:"assign-the-remaining-values",children:"Assign the remaining values"}),"\n",(0,t.jsxs)(n.p,{children:["In some cases, we still want to use the remaining values. The ",(0,t.jsx)(n.code,{children:"*"})," operator will help us do it. In Python, we can use the\xa0",(0,t.jsx)(n.code,{children:"*"}),"\xa0operator to collect leftover values when performing a destructuring assignment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'a, b, *re = ["a", "b", "c", "d", "e"]\r\nprint(a)    # a\r\nprint(b)    # b\r\nprint(re)   # [\'c\', \'d\', \'e\']\r\n\r\n*start, end = ("dog", "cat", "frog", "crab")\r\nprint(start)    # [\'dog\', \'cat\', \'frog\']\r\nprint(end)      # crab\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"_"})," character and the ",(0,t.jsx)(n.code,{children:"*"})," operator together to ignore the remaining values."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'a, *_ = ["a", "b", "c", "d", "e"]\r\nprint(a)    # a\r\n\r\nstart, *_, end = ("a", "b", "c", "d", "e")\r\nprint(start)    # a\r\nprint(end)      # e\n'})}),"\n",(0,t.jsx)(n.h2,{id:"destructuring-in-loops",children:"Destructuring in loops"}),"\n",(0,t.jsxs)(n.p,{children:["We are familiar with the syntax of ",(0,t.jsx)(n.code,{children:"for"})," loops. We can access each element in a list directly instead of using an index like in some other languages. This makes our code more Pythonic."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"users = [\r\n    ( 1, \"Bach\", \"HCM\" ),\r\n    ( 2, \"Nam\", \"HN\" ),\r\n    ( 3, \"Trung\", \"NT\" )\r\n]\r\n\r\nfor user in users:\r\n    print(user)\r\n# (1, 'Bach', 'HCM')\r\n# (2, 'Nam', 'HN')\r\n# (3, 'Trung', 'NT')\n"})}),"\n",(0,t.jsx)(n.p,{children:"With destructuring syntax, we can access individual attributes inside an element in for loops. We can write clearer and more readable code. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'users = [\r\n    ( 1, "Bach", "HCM" ),\r\n    ( 2, "Nam", "HN" ),\r\n    ( 3, "Trung", "PR-TC" )\r\n]\r\n\r\nfor id, name, city in users:\r\n    print("Id:", id, "- Name:", name, "- City:", city)\r\n# Id: 1 - Name: Bach - City: HCM\r\n# Id: 2 - Name: Nam - City: HN\r\n# Id: 3 - Name: Trung - City: PR-TC\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Or you can even get the index of the element with the ",(0,t.jsx)(n.code,{children:"enumerate"})," object."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["The enumerate object yields pairs containing a count (from start, which defaults to zero) and a value yielded by the iterable argument.\r\n\u2014 ",(0,t.jsx)(n.a,{href:"https://docs.python.org/2/library/functions.html?highlight=enumerate#enumerate",children:"Python Docs"})," \u2014"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'users = [\r\n    ( 1, "Bach", "HCM" ),\r\n    ( 2, "Nam", "HN" ),\r\n    ( 3, "Trung", "PR-TC" )\r\n]\r\n\r\nfor index, (id, name, city) in enumerate(users):\r\n    print("Index:", index, "- Id:", id, "- Name:", name, "- City:", city)\r\n# Index: 0 - Id: 1 - Name: Bach - City: HCM\r\n# Index: 1 - Id: 2 - Name: Nam - City: HN\r\n# Index: 2 - Id: 3 - Name: Trung - City: PR-TC\n'})}),"\n",(0,t.jsx)(n.p,{children:"Furthermore, we can combine the use of the ignore values syntax and collect the remaining values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'users = [\r\n    [ 1, "Bach", "HCM", "Python" ],\r\n    [ 2, "Nam", "HN", "JavaScript" ],\r\n    [ 3, "Trung", "PR-TC", "TypeScript" ]\r\n]\r\n\r\nfor id, _, *values in users:\r\n    print("Id:", id, "- Value:", values)\r\n# Id: 1 - Value: [\'HCM\', \'Python\']\r\n# Id: 2 - Value: [\'HN\', \'JavaScript\']\r\n# Id: 3 - Value: [\'PR-TC\', \'TypeScript\']\n'})}),"\n",(0,t.jsx)(n.h2,{id:"destructuring-dictionaries",children:"Destructuring dictionaries"}),"\n",(0,t.jsx)(n.p,{children:"In my work, I often encounter situations where I need to handle objects/dictionaries with many key-value pairs."}),"\n",(0,t.jsx)(n.h3,{id:"standard-concept-1",children:"Standard concept"}),"\n",(0,t.jsx)(n.p,{children:"Let's evaluate the example below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"customer = {\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Cena\",\r\n    \"age\": 23,\r\n    \"email\": \"johncena@gmail.com\"\r\n}\r\n\r\none, two, three, four = customer\r\nprint(f\"One '{one}', two '{two}', three '{three}', four '{four}'\")\r\n# One 'first_name', two 'last_name', three 'age', four 'email'\r\n\r\none, two, three, four = customer.values()\r\nprint(f\"One '{one}', two '{two}', three '{three}', four '{four}'\")\r\n# One 'John', two 'Cena', three '23', four 'johncena@gmail.com'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, when we try to get the variables ",(0,t.jsx)(n.code,{children:"one"}),", ",(0,t.jsx)(n.code,{children:"two"}),", ",(0,t.jsx)(n.code,{children:"three"}),", and ",(0,t.jsx)(n.code,{children:"four"}),", these variables will receive the corresponding values of the keys from the ",(0,t.jsx)(n.code,{children:"customer"})," dictionary. Or we can get the list of values of the keys in that order by using the ",(0,t.jsx)(n.code,{children:".values()"})," method of the dictionary."]}),"\n",(0,t.jsx)(n.p,{children:"Instead of using the above approach, we can directly get the values from the dictionary using their keys."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"print(f\"Customer email {customer['email']}, age {customer['age']}\")\r\n# Customer email johncena@gmail.com, age 23\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you access an unknown key, it will throw a ",(0,t.jsx)(n.code,{children:"KeyError"})," exception."]}),"\n",(0,t.jsx)(n.h3,{id:"advanced-techniques",children:"Advanced techniques"}),"\n",(0,t.jsx)(n.p,{children:"The above approaches are completely fine, and you can get the job done quickly without much effort."}),"\n",(0,t.jsx)(n.p,{children:"But maintaining or reading that code is a nightmare. Imagine you have a dictionary with hundreds of keys (or even more), each part where you access a key of the dictionary and perform logic with it. After a few weeks or months, you get a task related to that code. That's where the nightmare begins."}),"\n",(0,t.jsx)(n.p,{children:"To solve that problem, we should group the declarations of the variables we need to use together. And I found a way to do that while keeping our code clean and readable."}),"\n",(0,t.jsxs)(n.p,{children:["We can use\xa0",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/operator.html",children:(0,t.jsx)(n.code,{children:"operator"})}),"\xa0module from the standard library as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'from operator import itemgetter\r\n\r\ncurrent_user = {\r\n    "id": 1,\r\n    "username": "pxuanbach",\r\n    "email": "pxuanbach@gmail.com",\r\n    "phone": "832819201",\r\n    "full_name": "Bach Pham",\r\n    "gender": "Male",\r\n    "website": "immersedincode.io.vn"\r\n}\r\n\r\nid, email, gender, username = itemgetter(\r\n    \'id\', \'email\', \'gender\', \'username\'\r\n)(current_user)\r\n\r\nprint("Id:", id, "- Email:", email, "- Gender:", gender, "- Username:", username)\r\n# Id: 1 - Email: pxuanbach@gmail.com - Gender: Male - Username: pxuanbach\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, the value of each variable will correspond to the order of keys in the ",(0,t.jsx)(n.code,{children:"itemgetter"})," function. Additionally, If you access an unknown key, the function will throw a ",(0,t.jsx)(n.code,{children:"KeyError"})," exception."]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"So we've covered destructuring lists, tuples, for loops, and dictionaries. I hope this article is helpful to you."}),"\n",(0,t.jsxs)(n.p,{children:["If you need a project to run a demo on your environment, here is my\xa0",(0,t.jsx)(n.a,{href:"https://github.com/pxuanbach/Destructuring-in-Python",children:"Git repository"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.teclado.com/destructuring-in-python/",children:"Destructuring in Python (teclado.com)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://stackoverflow.com/a/63600600/22865115",children:"Destructuring dicts and objects in Python (stackoverflow.com)"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8624:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/destructuring-dict-example-ce36481babb43a46850ce7decfe4a0a3.png"},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);